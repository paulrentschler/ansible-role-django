---
# Install and configure a Django application


##
# Install the OS dependencies
##
- name: install OS dependencies
  package:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop: "{{ django_dependencies|flatten() }}"
  become: yes
  tags:
    - django_install



#
# Create the virtual environment
##
- name: install virtualenv
  ansible.builtin.pip:
    name: virtualenv
    state: present
    executable: "/usr/bin/pip"
  become: yes
  tags:
    - django_install

- name: create the virtual environment directory
  ansible.builtin.file:
    path: "{{ django_virtualenv_path }}"
    state: directory
    owner: root
    group: "{{ devops_group|default('adm') }}"
    mode: "0775"
  become: yes
  tags:
    - django_config
    - django_install

- name: create the app directory
  ansible.builtin.file:
    path: "{{ django_app_path }}"
    state: directory
    owner: "{{ devops_user|default(ansible_user) }}"
    group: "{{ devops_group|default('adm') }}"
    mode: "0775"
  become: yes
  tags:
    - django_config
    - django_install

- name: create the src directory
  ansible.builtin.file:
    path: "{{ django_src_path }}"
    state: directory
    owner: "{{ devops_user|default(ansible_user) }}"
    group: "{{ devops_group|default('adm') }}"
    mode: "0775"
  become: yes
  tags:
    - django_config
    - django_install



##
# Run pre-deploy scripts
##
- name: check for predeploy.sh script
  ansible.builtin.stat:
    path: "{{ django_virtualenv_path }}/predeploy.sh"
  register: _django_predeploy_file
  tags:
    - django_deploy

- name: run the predeploy.sh script
  ansible.builtin.command: "{{ django_virtualenv_path }}/predeploy.sh"
  when: _django_predeploy_file.stat.executable is defined and _django_predeploy_file.stat.executable
  tags:
    - django_deploy

- name: create the predeploy.sh script
  ansible.builtin.file:
    path: "{{ django_virtualenv_path }}/predeploy.sh"
    state: touch
    owner: "{{ devops_user|default(ansible_user) }}"
    group: "{{ devops_group|default('adm') }}"
    mode: "0664"
  when: not _django_predeploy_file.stat.exists|default(False)|bool
  tags:
    - django_deploy

- name: make predeploy.sh non-executable
  ansible.builtin.file:
    path: "{{ django_virtualenv_path }}/predeploy.sh"
    mode: "0664"
  when: _django_predeploy_file.stat.executable is defined and _django_predeploy_file.stat.executable
  tags:
    - django_deploy



##
# Install the code
##
- name: establish the .ssh directory
  ansible.builtin.file:
    path: ~/.ssh
    state: directory
    owner: "{{ devops_user|default(ansible_user) }}"
    mode: "0755"
  tags:
    - django_config
    - django_install

- name: set the deploy key
  ansible.builtin.copy:
    content: "{{ django_deploy_key }}"
    dest: ~/.ssh/id_rsa
    mode: "0400"
  tags:
    - django_deploy
    - django_install


### Install Python packages under development

- name: clone/update packages
  ansible.builtin.git:
    repo: "ssh://{{ item.server|default('git@git.psu.edu') }}/{{ item.repo }}"
    dest: "{{ django_src_path }}/{{ item.name }}"
    version: "{% if item.revision is defined %}{{ item.revision }}{% elif django_environment == 'production' %}master{% else %}develop{% endif %}"
    accept_hostkey: yes
  loop: "{{ django_packages | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.repo }}"
    pause: 5
  notify: Django Restart uWSGI
  register: _django_gitclone
  tags:
    - django_deploy
    - django_install

- name: install the packages
  ansible.builtin.pip:
    name: "{{ django_src_path }}/{{ item.item.name }}"
    editable: true
    extra_args: "-e"
    state: present
    virtualenv: "{{ django_virtualenv_path }}"
    virtualenv_command: "{{ 'virtualenv' if django_python_version == 2 else omit }}"
    virtualenv_python: "{{ 'python2.7' if django_python_version == 2 else omit }}"
  loop: "{{ _django_gitclone.results | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.item.name }}"
  when: item.changed
  become: yes
  tags:
    - django_deploy
    - django_install


### Install application package

- name: install/update application package
  ansible.builtin.git:
    repo: "ssh://{{ django_app_package.server|default('git@git.psu.edu') }}/{{ django_app_package.repo }}"
    dest: "{{ django_app_path }}"
    version: "{% if django_app_package.revision is defined %}{{ django_app_package.revision }}{% elif django_environment == 'production' %}master{% else %}develop{% endif %}"
    accept_hostkey: yes
  notify: Django Restart uWSGI
  tags:
    - django_deploy
    - django_install

- name: disable filemode tracking
  community.general.git_config:
    name: core.filemode
    scope: local
    repo: "{{ django_app_path }}"
    value: "false"
    state: present
  tags:
    - django_deploy
    - django_install


### Finalize the code installation

- name: install the required python libraries
  ansible.builtin.pip:
    requirements: "{{ django_app_path }}/requirements.txt"
    state: present
    virtualenv: "{{ django_virtualenv_path }}"
    virtualenv_command: "{{ 'virtualenv' if django_python_version == 2 else omit }}"
    virtualenv_python: "{{ 'python2.7' if django_python_version == 2 else omit }}"
    virtualenv_site_packages: no
  become: yes
  notify: Django Restart uWSGI
  tags:
    - django_deploy
    - django_install

- name: make manage.py executable
  ansible.builtin.file:
    path: "{{ django_app_path }}/manage.py"
    mode: "0775"
  become: yes
  tags:
    - django_config
    - django_deploy
    - django_install



##
# Configure the application
##
- name: check for existing local settings file
  ansible.builtin.stat: path={{ django_app_path }}/settings_local.py
  register: _django_local_settings
  tags:
    - django_config
    - django_deploy
    - django_install

- name: create the local settings file
  ansible.builtin.template:
    src: "{{ django_settings_local_template }}"
    dest: "{{ django_app_path }}/settings_local.py"
    backup: yes
    owner: "{{ devops_user|default(ansible_user) }}"
    group: "{{ devops_group|default('adm') }}"
    mode: "0664"
  when: (_django_local_settings.stat.exists and overwrite_local_settings is defined and overwrite_local_settings) or not _django_local_settings.stat.exists
  become: yes
  notify: Django Restart uWSGI
  tags:
    - django_config
    - django_deploy
    - django_install

- name: set the dev environment variable
  ansible.builtin.template:
    src: "environment.j2"
    dest: "/etc/profile.d/{{ django_app|lower }}_env.sh"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  tags:
    - django_config
    - django_install



##
# Logs
##
- name: create the logs directory
  ansible.builtin.file:
    path: "{{ django_app_path }}/logs"
    state: directory
    owner: "{{ apache_user }}"
    group: "{{ devops_group|default('adm') }}"
    mode: "0770"
  become: yes
  tags:
    - django_config
    - django_install

- name: create the logs archive directory
  ansible.builtin.file:
    path: "{{ django_app_path }}/logs/archive"
    state: directory
    owner: "{{ apache_user }}"
    group: "{{ devops_group|default('adm') }}"
    mode: "0770"
  become: yes
  tags:
    - django_config
    - django_install

- name: create the log files
  ansible.builtin.file:
    path: "{{ django_app_path }}/logs/{{ item }}"
    state: touch
    owner: "{{ apache_user }}"
    group: "{{ devops_group|default('adm') }}"
    mode: "0660"
  loop: "{{ django_log_files }}"
  become: yes
  tags:
    - django_config
    - django_install


## Configure log rotation for the log files

- name: define log rotation for the logs
  ansible.builtin.template:
    src: logrotate.j2
    dest: "/etc/logrotate.d/{{ django_app }}"
    owner: root
    group: root
    mode: "0644"
  become: yes
  tags:
    - django_config
    - django_install



##
# Create directories needed by the application
##
- name: create application directories
  ansible.builtin.file:
    path: "{{ django_app_path }}/{{ item.path }}"
    state: directory
    owner: "{{ item.owner|default(apache_user) }}"
    group: "{{ item.group|default(devops_group)|default('adm') }}"
    mode: "{{ item.mode|default('0775') }}"
  loop: "{{ django_directories }}"
  loop_control:
    label: "{{ item.name }}"
  become: yes
  tags:
    - django_config
    - django_install

- name: create email directory
  ansible.builtin.file:
    path: "{{ django_app_path }}/email"
    state: directory
    owner: "{{ apache_user }}"
    group: "{{ devops_group|default('adm') }}"
    mode: "0775"
  become: yes
  when: django_environment != 'production'
  tags:
    - django_config
    - django_install



##
# Setup the database
##
- name: create the database
  community.mysql.mysql_db:
    name: "{{ django_db_name }}"
    state: present
    login_unix_socket: "{{ django_db_socket }}"
  register: _django_mysql_db_created
  become: yes
  delegate_to: "{{ django_db_host if django_db_host != '' else omit }}"
  tags:
    - django_install

- name: create the user and grant permissions
  community.mysql.mysql_user:
    user: "{{ django_db_user }}"
    password: "{{ django_db_password }}"
    host: "{% if django_db_port != '' %}{{ ansible_host|default('localhost') }}{% else %}localhost{% endif %}"
    priv: "{{ django_db_name }}.*:ALL"
    tls_requires:
      ssl:
    state: present
    login_unix_socket: "{{ django_db_socket }}"
  become: yes
  delegate_to: "{{ django_db_host if django_db_host != '' else omit }}"
  tags:
    - django_config
    - django_install

# - name: ensure the database isn't read only
#   community.mysql.mysql_variables:
#     variable: read_only
#     value: 0
#   register: _django_mysql_read_only_fix
#   become: yes
#   changed_when: _django_mysql_read_only_fix.msg == "Variable change succeeded prev_value=ON"
#   tags:
#     - django_install

- name: create the database schema
  community.general.django_manage:
    app_path: "{{ django_app_path }}"
    command: migrate
    virtualenv: "{{ django_virtualenv_path }}"
  when: _django_mysql_db_created is changed
  tags:
    - django_install



##
# Install the fixtures
##
- name: find the rebuilddb script
  ansible.builtin.stat:
    path: "{{ django_app_path }}/rebuilddb.sh"
  register: _django_rebuilddb
  when: _django_mysql_db_created is changed
  tags:
    - django_install
    - django_rebuilddb

- name: install the fixtures
  ansible.builtin.shell:
    argv:
      - "{{ django_app_path }}/rebuilddb.sh"
      - "no"
      - "{{ django_demo_data }}"
  when: _django_mysql_db_created is changed and _django_rebuilddb.stat.exists
  tags:
    - django_install
    - django_rebuilddb`


## Apply database schema changes

- name: migrate database schema changes
  community.general.django_manage:
    app_path: "{{ django_app_path }}"
    command: migrate
    virtualenv: "{{ django_virtualenv_path }}"
  notify: Django Restart uWSGI
  tags:
    - django_deploy
    - django_install
    - django_rebuilddb


## Run extra management commands

- name: run extra management commands
  django_manage:
    app_path: "{{ django_app_path }}"
    command: "{{ item }}"
    virtualenv: "{{ django_virtualenv_path }}"
  loop: "{{ django_extra_management_commands }}"
  tags:
    - django_deploy



##
# Collect all the supporting files
##
- name: collect the static files
  community.general.django_manage:
    app_path: "{{ django_app_path }}"
    command: collectstatic
    virtualenv: "{{ django_virtualenv_path }}"
  notify: Django Restart uWSGI
  tags:
    - django_deploy
    - django_install



##
# Install the cron jobs
##
- name: setup the cron jobs
  ansible.builtin.template:
    src: "{{ django_cronjobs_template }}"
    dest: "/etc/cron.d/{{ django_app }}"
  become: yes
  when: django_cronjobs_template is defined and django_cronjobs_template != ""
  tags:
    - django_config
    - django_cron
    - django_deploy
    - django_install



##
# Setup DjangoQ to run its workers
##
- name: create DjangoQ systemd service
  ansible.builtin.template:
    src: djangoq.systemd.service.j2
    dest: "/etc/systemd/system/djangoq_{{ django_app }}.service"
  become: yes
  when: django_use_djangoq|default('no')|bool
  tags:
    - django_install

- name: setup DjangoQ workers to run on boot up
  ansible.buildin.systemd:
    name: djangoq_{{ django_app }}
    state: started
    enabled: yes
  become: yes
  when: django_use_djangoq|default('no')|bool
  tags:
    - django_install

- name: restart DjangoQ workers
  ansible.builtin.systemd:
    name: djangoq_{{ django_app }}
    state: restarted
  become: yes
  when: django_use_djangoq|default('no')|bool
  tags:
    - django_deploy



##
# Setup the application hosting
##
- name: setup the Apache virtualhost subsite
  ansible.builtin.template:
    src: "{{ django_vhost_template }}"
    dest: "/etc/apache2/apps/{{ django_hostname }}.{{ django_domain }}-ssl/{{ django_app }}.conf"
    owner: root
    group: "{{ devops_group|default('adm') }}"
    mode: "0664"
  become: yes
  notify: Django Restart Apache
  tags:
    - django_config
    - django_deploy
    - django_install

- name: configure uWSGI
  ansible.builtin.template:
    src: "uwsgi_app.j2"
    dest: "/etc/uwsgi-emperor/apps/{{ django_app }}.ini"
    owner: root
    group: "{{ devops_group|default('adm') }}"
    mode: "0664"
  become: yes
  tags:
    - django_config
    - django_deploy
    - django_install



##
# Update firewall rules
##
- name: allow external submissions through the firewall
  ufw:
    rule: allow
    port: "443"
    src: "{{ item.ip }}"
  loop: "{{ django_external_submissions }}"
  loop_control:
    label: "{{ item.name|default(item.ip) }}"
  become: yes
  tags:
    - django_config
    - django_deploy
    - django_install



##
# Verify the application settings
##
- name: check application settings
  community.general.django_manage:
    app_path: "{{ django_app_path }}"
    command: check
    virtualenv: "{{ django_virtualenv_path }}"
  tags:
    - django_config
    - django_deploy
    - django_install



##
# Remove the deploy key
##
- name: remove the deploy key
  ansible.builtin.file:
    path: ~/.ssh/id_rsa
    state: absent
  tags:
    - django_deploy
    - django_install

